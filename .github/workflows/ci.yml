name: ci

on: [push, pull_request]

jobs:
  rust:
    name: deno_doc-${{ matrix.os }}
    if: |
      github.event_name == 'push' ||
      !startsWith(github.event.pull_request.head.label, 'denoland:')
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      matrix:
        os: [macOS-latest, ubuntu-latest, windows-latest]
    defaults:
      run:
        shell: bash

    env:
      CARGO_INCREMENTAL: 0
      GH_ACTIONS: 1
      RUST_BACKTRACE: full
      RUSTFLAGS: -D warnings

    steps:
      - name: Clone repository
        uses: actions/checkout@v5
        with:
          submodules: true

      - uses: dsherret/rust-toolchain-file@v1

      - uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Format
        if: contains(matrix.os, 'ubuntu')
        run: cargo fmt -- --check

      - name: Lint
        if: contains(matrix.os, 'ubuntu')
        run: cargo clippy --all-targets --locked -- -D clippy::all

      - name: Build (Rust)
        run: cargo build --locked --all-targets

      - name: Test
        run: cargo test --locked --all-targets

      # - name: Install cargo-llvm-cov
      #   if: contains(matrix.os, 'ubuntu')
      #   uses: taiki-e/install-action@cargo-llvm-cov

      # - name: Generate code coverage
      #   if: contains(matrix.os, 'ubuntu')
      #   run: cargo llvm-cov --lcov --output-path lcov.info

      # - name: Upload coverage to Codecov
      #   if: contains(matrix.os, 'ubuntu')
      #   uses: codecov/codecov-action@v3
      #   with:
      #     files: lcov.info
      #     fail_ci_if_error: true
      #     token: ${{ secrets.CODECOV_TOKEN }}

  javascript:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    timeout-minutes: 30
    steps:
      - name: Clone repository
        uses: actions/checkout@v5
        with:
          submodules: true
      - uses: dsherret/rust-toolchain-file@v1
      - uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Install Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: canary
          cache: true

      - name: Format
        run: deno fmt --check

      - name: Build (Wasm)
        run: deno task build

      - name: Lint
        run: deno lint

      - name: Tailwind Check
        run: |
          deno task tailwind
          git diff --exit-code

      - name: Test
        run: deno test --allow-read --allow-net --allow-env --allow-write

      - name: Publish to JSR
        run: cd js && deno run -A jsr:@david/publish-on-tag@0.1.3 --allow-dirty
