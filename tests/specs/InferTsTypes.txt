# mod.ts
export let s = "hello";
export let n = 123;
export let b = false;
export let bi = 100n;
export let re = /hello/;
export let tpl = `foobar`;

export function test() {
  console.log("hello");
}

export async function testAsync() {
  await Promise.resolve(2);
}

export function cannotInfer() {
  if (true) {
    return something();
  }
}

export async function cannotInferAsync() {
  for (var test of testing) {
    return await something();
  }
}

export function* cannotInferGenerator() {
}

export class MyClass {
  infer() {
  }
  async inferAync() {
  }

  cannotInfer() {
    for (var i = 0; i < 10; i++) {
      return something();
    }
  }

  async cannotInferAsync() {
    return await something();
  }

  *cannotInferGenerator() {
  }
}

export namespace MyNamespace {
  // should not infer because does not have a body
  declare function cannotInfer();
}

# diagnostics
error[missing-jsdoc]: exported symbol is missing JSDoc documentation
 --> /mod.ts:1:12
  | 
1 | export let s = "hello";
  |            ^


error[missing-jsdoc]: exported symbol is missing JSDoc documentation
 --> /mod.ts:2:12
  | 
2 | export let n = 123;
  |            ^


error[missing-jsdoc]: exported symbol is missing JSDoc documentation
 --> /mod.ts:3:12
  | 
3 | export let b = false;
  |            ^


error[missing-jsdoc]: exported symbol is missing JSDoc documentation
 --> /mod.ts:4:12
  | 
4 | export let bi = 100n;
  |            ^


error[missing-jsdoc]: exported symbol is missing JSDoc documentation
 --> /mod.ts:5:12
  | 
5 | export let re = /hello/;
  |            ^


error[missing-jsdoc]: exported symbol is missing JSDoc documentation
 --> /mod.ts:6:12
  | 
6 | export let tpl = `foobar`;
  |            ^


error[missing-jsdoc]: exported symbol is missing JSDoc documentation
 --> /mod.ts:8:1
  | 
8 | export function test() {
  | ^


error[missing-jsdoc]: exported symbol is missing JSDoc documentation
  --> /mod.ts:12:1
   | 
12 | export async function testAsync() {
   | ^


error[missing-jsdoc]: exported symbol is missing JSDoc documentation
  --> /mod.ts:16:1
   | 
16 | export function cannotInfer() {
   | ^


error[missing-return-type]: exported function is missing an explicit return type annotation
  --> /mod.ts:16:1
   | 
16 | export function cannotInfer() {
   | ^


error[missing-jsdoc]: exported symbol is missing JSDoc documentation
  --> /mod.ts:22:1
   | 
22 | export async function cannotInferAsync() {
   | ^


error[missing-return-type]: exported function is missing an explicit return type annotation
  --> /mod.ts:22:1
   | 
22 | export async function cannotInferAsync() {
   | ^


error[missing-jsdoc]: exported symbol is missing JSDoc documentation
  --> /mod.ts:28:1
   | 
28 | export function* cannotInferGenerator() {
   | ^


error[missing-return-type]: exported function is missing an explicit return type annotation
  --> /mod.ts:28:1
   | 
28 | export function* cannotInferGenerator() {
   | ^


error[missing-jsdoc]: exported symbol is missing JSDoc documentation
  --> /mod.ts:31:1
   | 
31 | export class MyClass {
   | ^


error[missing-jsdoc]: exported symbol is missing JSDoc documentation
  --> /mod.ts:32:3
   | 
32 |   infer() {
   |   ^


error[missing-jsdoc]: exported symbol is missing JSDoc documentation
  --> /mod.ts:34:3
   | 
34 |   async inferAync() {
   |   ^


error[missing-jsdoc]: exported symbol is missing JSDoc documentation
  --> /mod.ts:37:3
   | 
37 |   cannotInfer() {
   |   ^


error[missing-return-type]: exported function is missing an explicit return type annotation
  --> /mod.ts:37:3
   | 
37 |   cannotInfer() {
   |   ^


error[missing-jsdoc]: exported symbol is missing JSDoc documentation
  --> /mod.ts:43:3
   | 
43 |   async cannotInferAsync() {
   |   ^


error[missing-return-type]: exported function is missing an explicit return type annotation
  --> /mod.ts:43:3
   | 
43 |   async cannotInferAsync() {
   |   ^


error[missing-jsdoc]: exported symbol is missing JSDoc documentation
  --> /mod.ts:47:3
   | 
47 |   *cannotInferGenerator() {
   |   ^


error[missing-return-type]: exported function is missing an explicit return type annotation
  --> /mod.ts:47:3
   | 
47 |   *cannotInferGenerator() {
   |   ^


error[missing-jsdoc]: exported symbol is missing JSDoc documentation
  --> /mod.ts:51:1
   | 
51 | export namespace MyNamespace {
   | ^


error[missing-jsdoc]: exported symbol is missing JSDoc documentation
  --> /mod.ts:53:3
   | 
53 |   declare function cannotInfer();
   |   ^


error[missing-return-type]: exported function is missing an explicit return type annotation
  --> /mod.ts:53:3
   | 
53 |   declare function cannotInfer();
   |   ^


# output.txt
Defined in file:///mod.ts:16:1

function cannotInfer()

Defined in file:///mod.ts:22:1

async function cannotInferAsync()

Defined in file:///mod.ts:28:1

function* cannotInferGenerator()

Defined in file:///mod.ts:8:1

function test(): void

Defined in file:///mod.ts:12:1

async function testAsync(): Promise<void>

Defined in file:///mod.ts:3:12

let b: boolean

Defined in file:///mod.ts:4:12

let bi: bigint

Defined in file:///mod.ts:2:12

let n: number

Defined in file:///mod.ts:5:12

let re: RegExp

Defined in file:///mod.ts:1:12

let s: string

Defined in file:///mod.ts:6:12

let tpl: string

Defined in file:///mod.ts:31:1

class MyClass

  infer(): void
  async inferAync(): Promise<void>
  cannotInfer()
  async cannotInferAsync()
  *cannotInferGenerator()

Defined in file:///mod.ts:51:1

namespace MyNamespace

  function cannotInfer()


# output.json
[
  {
    "kind": "variable",
    "name": "s",
    "location": {
      "filename": "file:///mod.ts",
      "line": 1,
      "col": 11,
      "byteIndex": 11
    },
    "declarationKind": "export",
    "variableDef": {
      "tsType": {
        "repr": "string",
        "kind": "keyword",
        "keyword": "string"
      },
      "kind": "let"
    }
  },
  {
    "kind": "variable",
    "name": "n",
    "location": {
      "filename": "file:///mod.ts",
      "line": 2,
      "col": 11,
      "byteIndex": 35
    },
    "declarationKind": "export",
    "variableDef": {
      "tsType": {
        "repr": "number",
        "kind": "keyword",
        "keyword": "number"
      },
      "kind": "let"
    }
  },
  {
    "kind": "variable",
    "name": "b",
    "location": {
      "filename": "file:///mod.ts",
      "line": 3,
      "col": 11,
      "byteIndex": 55
    },
    "declarationKind": "export",
    "variableDef": {
      "tsType": {
        "repr": "boolean",
        "kind": "keyword",
        "keyword": "boolean"
      },
      "kind": "let"
    }
  },
  {
    "kind": "variable",
    "name": "bi",
    "location": {
      "filename": "file:///mod.ts",
      "line": 4,
      "col": 11,
      "byteIndex": 77
    },
    "declarationKind": "export",
    "variableDef": {
      "tsType": {
        "repr": "bigint",
        "kind": "keyword",
        "keyword": "bigint"
      },
      "kind": "let"
    }
  },
  {
    "kind": "variable",
    "name": "re",
    "location": {
      "filename": "file:///mod.ts",
      "line": 5,
      "col": 11,
      "byteIndex": 99
    },
    "declarationKind": "export",
    "variableDef": {
      "tsType": {
        "repr": "hello",
        "kind": "typeRef",
        "typeRef": {
          "typeParams": null,
          "typeName": "RegExp"
        }
      },
      "kind": "let"
    }
  },
  {
    "kind": "variable",
    "name": "tpl",
    "location": {
      "filename": "file:///mod.ts",
      "line": 6,
      "col": 11,
      "byteIndex": 124
    },
    "declarationKind": "export",
    "variableDef": {
      "tsType": {
        "repr": "string",
        "kind": "keyword",
        "keyword": "string"
      },
      "kind": "let"
    }
  },
  {
    "kind": "function",
    "name": "test",
    "location": {
      "filename": "file:///mod.ts",
      "line": 8,
      "col": 0,
      "byteIndex": 141
    },
    "declarationKind": "export",
    "functionDef": {
      "params": [],
      "returnType": {
        "repr": "void",
        "kind": "keyword",
        "keyword": "void"
      },
      "hasBody": true,
      "isAsync": false,
      "isGenerator": false,
      "typeParams": []
    }
  },
  {
    "kind": "function",
    "name": "testAsync",
    "location": {
      "filename": "file:///mod.ts",
      "line": 12,
      "col": 0,
      "byteIndex": 193
    },
    "declarationKind": "export",
    "functionDef": {
      "params": [],
      "returnType": {
        "repr": "Promise",
        "kind": "typeRef",
        "typeRef": {
          "typeParams": [
            {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            }
          ],
          "typeName": "Promise"
        }
      },
      "hasBody": true,
      "isAsync": true,
      "isGenerator": false,
      "typeParams": []
    }
  },
  {
    "kind": "function",
    "name": "cannotInfer",
    "location": {
      "filename": "file:///mod.ts",
      "line": 16,
      "col": 0,
      "byteIndex": 260
    },
    "declarationKind": "export",
    "functionDef": {
      "params": [],
      "returnType": null,
      "hasBody": true,
      "isAsync": false,
      "isGenerator": false,
      "typeParams": []
    }
  },
  {
    "kind": "function",
    "name": "cannotInferAsync",
    "location": {
      "filename": "file:///mod.ts",
      "line": 22,
      "col": 0,
      "byteIndex": 337
    },
    "declarationKind": "export",
    "functionDef": {
      "params": [],
      "returnType": null,
      "hasBody": true,
      "isAsync": true,
      "isGenerator": false,
      "typeParams": []
    }
  },
  {
    "kind": "function",
    "name": "cannotInferGenerator",
    "location": {
      "filename": "file:///mod.ts",
      "line": 28,
      "col": 0,
      "byteIndex": 447
    },
    "declarationKind": "export",
    "functionDef": {
      "params": [],
      "returnType": null,
      "hasBody": true,
      "isAsync": false,
      "isGenerator": true,
      "typeParams": []
    }
  },
  {
    "kind": "class",
    "name": "MyClass",
    "location": {
      "filename": "file:///mod.ts",
      "line": 31,
      "col": 0,
      "byteIndex": 492
    },
    "declarationKind": "export",
    "classDef": {
      "isAbstract": false,
      "constructors": [],
      "properties": [],
      "indexSignatures": [],
      "methods": [
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "infer",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///mod.ts",
            "line": 32,
            "col": 2,
            "byteIndex": 517
          }
        },
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "inferAync",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "hasBody": true,
            "isAsync": true,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///mod.ts",
            "line": 34,
            "col": 2,
            "byteIndex": 533
          }
        },
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "cannotInfer",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///mod.ts",
            "line": 37,
            "col": 2,
            "byteIndex": 560
          }
        },
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "cannotInferAsync",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": null,
            "hasBody": true,
            "isAsync": true,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///mod.ts",
            "line": 43,
            "col": 2,
            "byteIndex": 650
          }
        },
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "cannotInferGenerator",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": true,
            "typeParams": []
          },
          "location": {
            "filename": "file:///mod.ts",
            "line": 47,
            "col": 2,
            "byteIndex": 714
          }
        }
      ],
      "extends": null,
      "implements": [],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "namespace",
    "name": "MyNamespace",
    "location": {
      "filename": "file:///mod.ts",
      "line": 51,
      "col": 0,
      "byteIndex": 747
    },
    "declarationKind": "export",
    "namespaceDef": {
      "elements": [
        {
          "kind": "function",
          "name": "cannotInfer",
          "location": {
            "filename": "file:///mod.ts",
            "line": 53,
            "col": 2,
            "byteIndex": 831
          },
          "declarationKind": "declare",
          "functionDef": {
            "params": [],
            "returnType": null,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        }
      ]
    }
  }
]
